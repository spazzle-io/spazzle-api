// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    wallet_address, gamer_tag
) VALUES (
    $1, $2
) RETURNING id, wallet_address, gamer_tag, created_at
`

type CreateUserParams struct {
	WalletAddress string      `json:"wallet_address"`
	GamerTag      pgtype.Text `json:"gamer_tag"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.WalletAddress, arg.GamerTag)
	var i User
	err := row.Scan(
		&i.ID,
		&i.WalletAddress,
		&i.GamerTag,
		&i.CreatedAt,
	)
	return i, err
}

const getTotalUserCount = `-- name: GetTotalUserCount :one
SELECT COUNT(*) as total_users FROM users
`

func (q *Queries) GetTotalUserCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalUserCount)
	var total_users int64
	err := row.Scan(&total_users)
	return total_users, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, wallet_address, gamer_tag, created_at FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.WalletAddress,
		&i.GamerTag,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, wallet_address, gamer_tag, created_at FROM users
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.WalletAddress,
			&i.GamerTag,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    gamer_tag = COALESCE($1, gamer_tag)
WHERE
    id = $2
RETURNING id, wallet_address, gamer_tag, created_at
`

type UpdateUserParams struct {
	GamerTag pgtype.Text `json:"gamer_tag"`
	UserID   uuid.UUID   `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.GamerTag, arg.UserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.WalletAddress,
		&i.GamerTag,
		&i.CreatedAt,
	)
	return i, err
}

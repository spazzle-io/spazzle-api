syntax = "proto3";

package auth.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "auth/v1/rpc_get_siwe_payload.proto";
import "auth/v1/rpc_authenticate.proto";
import "auth/v1/rpc_verify_access_token.proto";
import "auth/v1/rpc_refresh_access_token.proto";
import "auth/v1/rpc_revoke_refresh_tokens.proto";

option go_package = "github.com/spazzle-io/spazzle-api/services/auth/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Auth Service";
    version: "0";
    contact: {
      name: "Spazzle";
      url: "https://spazzle.io";
    };
  };
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: bearer <token>"
      }
    }
  };
  security: {
    security_requirement: {
      key: "bearer"
    }
  };
};

service AuthService {
  rpc GetSIWEPayload(GetSIWEPayloadRequest) returns (GetSIWEPayloadResponse) {
    option (google.api.http) = {
      get: "/auth/siwe-payload"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Generate SIWE message payload for EVM compatible chains";
      description: "Generates a Sign-In With Ethereum (SIWE) message payload for the specified wallet address and domain";
      security: {};
    };
  }

  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {
    option (google.api.http) = {
      post: "/auth/authenticate"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Authenticates a user via their Web3 wallet and a SIWE (Sign-In with Ethereum) message";
      description: "Authenticate a user by verifying their Ethereum wallet address using a cryptographic signature";
      extensions: {
        key: "x-internal",
        value: {
          bool_value: true
        }
      }
      security: {};
    };
  }

  rpc VerifyAccessToken(VerifyAccessTokenRequest) returns (VerifyAccessTokenResponse) {
    option (google.api.http) = {
      post: "/auth/verify-access-token"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Verify access token";
      description: "Verify whether an access token is valid for a specified user id";
      security: {
        security_requirement: {
          key: "bearer"
        }
      };
    };
  }

  rpc RefreshAccessToken(RefreshAccessTokenRequest) returns (RefreshAccessTokenResponse) {
    option (google.api.http) = {
      post: "/auth/refresh-access-token"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Refresh access token";
      description: "Get a new access token using a valid refresh token";
      security: {
        security_requirement: {
          key: "bearer"
        }
      };
    };
  }

  rpc RevokeRefreshTokens(RevokeRefreshTokensRequest) returns (RevokeRefreshTokensResponse) {
    option (google.api.http) = {
      post: "/auth/revoke-refresh-tokens"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Revoke refresh tokens";
      description: "Revoke all refresh tokens associated with a user id";
      security: {
        security_requirement: {
          key: "bearer"
        }
      };
    };
  }
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgconn"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    id,
    user_id,
    wallet_address,
    refresh_token,
    user_agent,
    client_ip,
    expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, wallet_address, refresh_token, user_agent, client_ip, is_revoked, expires_at, created_at
`

type CreateSessionParams struct {
	ID            uuid.UUID `json:"id"`
	UserID        uuid.UUID `json:"user_id"`
	WalletAddress string    `json:"wallet_address"`
	RefreshToken  string    `json:"refresh_token"`
	UserAgent     string    `json:"user_agent"`
	ClientIp      string    `json:"client_ip"`
	ExpiresAt     time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.WalletAddress,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletAddress,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionById = `-- name: GetSessionById :one
SELECT id, user_id, wallet_address, refresh_token, user_agent, client_ip, is_revoked, expires_at, created_at FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSessionById(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionById, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletAddress,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const revokeSessions = `-- name: RevokeSessions :execresult
UPDATE sessions
SET is_revoked = true
WHERE user_id = $1 AND is_revoked = false
`

func (q *Queries) RevokeSessions(ctx context.Context, userID uuid.UUID) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, revokeSessions, userID)
}

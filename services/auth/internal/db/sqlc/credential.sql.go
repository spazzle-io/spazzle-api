// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: credential.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCredential = `-- name: CreateCredential :one
INSERT INTO credentials (
    user_id, wallet_address
) VALUES (
    $1, $2
) RETURNING id, user_id, wallet_address, role, created_at
`

type CreateCredentialParams struct {
	UserID        uuid.UUID `json:"user_id"`
	WalletAddress string    `json:"wallet_address"`
}

func (q *Queries) CreateCredential(ctx context.Context, arg CreateCredentialParams) (Credential, error) {
	row := q.db.QueryRow(ctx, createCredential, arg.UserID, arg.WalletAddress)
	var i Credential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletAddress,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getCredentialByWalletAddress = `-- name: GetCredentialByWalletAddress :one
SELECT id, user_id, wallet_address, role, created_at FROM credentials
WHERE wallet_address = $1
LIMIT 1
`

func (q *Queries) GetCredentialByWalletAddress(ctx context.Context, walletAddress string) (Credential, error) {
	row := q.db.QueryRow(ctx, getCredentialByWalletAddress, walletAddress)
	var i Credential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletAddress,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

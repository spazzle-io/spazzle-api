// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spazzle-io/spazzle-api/services/auth/internal/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package=mockdb --destination=internal/db/mock/store.go github.com/spazzle-io/spazzle-api/services/auth/internal/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	db "github.com/spazzle-io/spazzle-api/services/auth/internal/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCredential mocks base method.
func (m *MockStore) CreateCredential(ctx context.Context, arg db.CreateCredentialParams) (db.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredential", ctx, arg)
	ret0, _ := ret[0].(db.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredential indicates an expected call of CreateCredential.
func (mr *MockStoreMockRecorder) CreateCredential(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredential", reflect.TypeOf((*MockStore)(nil).CreateCredential), ctx, arg)
}

// CreateCredentialTx mocks base method.
func (m *MockStore) CreateCredentialTx(ctx context.Context, params db.CreateCredentialTxParams) (db.CreateCredentialTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredentialTx", ctx, params)
	ret0, _ := ret[0].(db.CreateCredentialTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredentialTx indicates an expected call of CreateCredentialTx.
func (mr *MockStoreMockRecorder) CreateCredentialTx(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredentialTx", reflect.TypeOf((*MockStore)(nil).CreateCredentialTx), ctx, params)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(ctx context.Context, arg db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, arg)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), ctx, arg)
}

// GetCredentialByWalletAddress mocks base method.
func (m *MockStore) GetCredentialByWalletAddress(ctx context.Context, walletAddress string) (db.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialByWalletAddress", ctx, walletAddress)
	ret0, _ := ret[0].(db.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialByWalletAddress indicates an expected call of GetCredentialByWalletAddress.
func (mr *MockStoreMockRecorder) GetCredentialByWalletAddress(ctx, walletAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialByWalletAddress", reflect.TypeOf((*MockStore)(nil).GetCredentialByWalletAddress), ctx, walletAddress)
}

// GetSessionById mocks base method.
func (m *MockStore) GetSessionById(ctx context.Context, id uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionById", ctx, id)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionById indicates an expected call of GetSessionById.
func (mr *MockStoreMockRecorder) GetSessionById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionById", reflect.TypeOf((*MockStore)(nil).GetSessionById), ctx, id)
}

// RevokeSessions mocks base method.
func (m *MockStore) RevokeSessions(ctx context.Context, userID uuid.UUID) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSessions", ctx, userID)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeSessions indicates an expected call of RevokeSessions.
func (mr *MockStoreMockRecorder) RevokeSessions(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSessions", reflect.TypeOf((*MockStore)(nil).RevokeSessions), ctx, userID)
}
